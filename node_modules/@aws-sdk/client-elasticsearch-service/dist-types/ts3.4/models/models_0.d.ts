import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
import { ElasticsearchServiceServiceException as __BaseException } from "./ElasticsearchServiceServiceException";
export interface AcceptInboundCrossClusterSearchConnectionRequest {
  CrossClusterSearchConnectionId: string | undefined;
}
export declare const InboundCrossClusterSearchConnectionStatusCode: {
  readonly APPROVED: "APPROVED";
  readonly DELETED: "DELETED";
  readonly DELETING: "DELETING";
  readonly PENDING_ACCEPTANCE: "PENDING_ACCEPTANCE";
  readonly REJECTED: "REJECTED";
  readonly REJECTING: "REJECTING";
};
export type InboundCrossClusterSearchConnectionStatusCode =
  (typeof InboundCrossClusterSearchConnectionStatusCode)[keyof typeof InboundCrossClusterSearchConnectionStatusCode];
export interface InboundCrossClusterSearchConnectionStatus {
  StatusCode?: InboundCrossClusterSearchConnectionStatusCode | string;
  Message?: string;
}
export interface DomainInformation {
  OwnerId?: string;
  DomainName: string | undefined;
  Region?: string;
}
export interface InboundCrossClusterSearchConnection {
  SourceDomainInfo?: DomainInformation;
  DestinationDomainInfo?: DomainInformation;
  CrossClusterSearchConnectionId?: string;
  ConnectionStatus?: InboundCrossClusterSearchConnectionStatus;
}
export interface AcceptInboundCrossClusterSearchConnectionResponse {
  CrossClusterSearchConnection?: InboundCrossClusterSearchConnection;
}
export declare class DisabledOperationException extends __BaseException {
  readonly name: "DisabledOperationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DisabledOperationException, __BaseException>
  );
}
export declare class LimitExceededException extends __BaseException {
  readonly name: "LimitExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<LimitExceededException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export declare const OptionState: {
  readonly Active: "Active";
  readonly Processing: "Processing";
  readonly RequiresIndexDocuments: "RequiresIndexDocuments";
};
export type OptionState = (typeof OptionState)[keyof typeof OptionState];
export interface OptionStatus {
  CreationDate: Date | undefined;
  UpdateDate: Date | undefined;
  UpdateVersion?: number;
  State: OptionState | string | undefined;
  PendingDeletion?: boolean;
}
export interface AccessPoliciesStatus {
  Options: string | undefined;
  Status: OptionStatus | undefined;
}
export interface AdditionalLimit {
  LimitName?: string;
  LimitValues?: string[];
}
export interface Tag {
  Key: string | undefined;
  Value: string | undefined;
}
export interface AddTagsRequest {
  ARN: string | undefined;
  TagList: Tag[] | undefined;
}
export declare class BaseException extends __BaseException {
  readonly name: "BaseException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<BaseException, __BaseException>);
}
export declare class InternalException extends __BaseException {
  readonly name: "InternalException";
  readonly $fault: "server";
  constructor(opts: __ExceptionOptionType<InternalException, __BaseException>);
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface AdvancedOptionsStatus {
  Options: Record<string, string> | undefined;
  Status: OptionStatus | undefined;
}
export interface SAMLIdp {
  MetadataContent: string | undefined;
  EntityId: string | undefined;
}
export interface SAMLOptionsOutput {
  Enabled?: boolean;
  Idp?: SAMLIdp;
  SubjectKey?: string;
  RolesKey?: string;
  SessionTimeoutMinutes?: number;
}
export interface AdvancedSecurityOptions {
  Enabled?: boolean;
  InternalUserDatabaseEnabled?: boolean;
  SAMLOptions?: SAMLOptionsOutput;
  AnonymousAuthDisableDate?: Date;
  AnonymousAuthEnabled?: boolean;
}
export interface MasterUserOptions {
  MasterUserARN?: string;
  MasterUserName?: string;
  MasterUserPassword?: string;
}
export interface SAMLOptionsInput {
  Enabled?: boolean;
  Idp?: SAMLIdp;
  MasterUserName?: string;
  MasterBackendRole?: string;
  SubjectKey?: string;
  RolesKey?: string;
  SessionTimeoutMinutes?: number;
}
export interface AdvancedSecurityOptionsInput {
  Enabled?: boolean;
  InternalUserDatabaseEnabled?: boolean;
  MasterUserOptions?: MasterUserOptions;
  SAMLOptions?: SAMLOptionsInput;
  AnonymousAuthEnabled?: boolean;
}
export interface AdvancedSecurityOptionsStatus {
  Options: AdvancedSecurityOptions | undefined;
  Status: OptionStatus | undefined;
}
export interface AssociatePackageRequest {
  PackageID: string | undefined;
  DomainName: string | undefined;
}
export declare const DomainPackageStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly ASSOCIATING: "ASSOCIATING";
  readonly ASSOCIATION_FAILED: "ASSOCIATION_FAILED";
  readonly DISSOCIATING: "DISSOCIATING";
  readonly DISSOCIATION_FAILED: "DISSOCIATION_FAILED";
};
export type DomainPackageStatus =
  (typeof DomainPackageStatus)[keyof typeof DomainPackageStatus];
export interface ErrorDetails {
  ErrorType?: string;
  ErrorMessage?: string;
}
export declare const PackageType: {
  readonly TXT_DICTIONARY: "TXT-DICTIONARY";
};
export type PackageType = (typeof PackageType)[keyof typeof PackageType];
export interface DomainPackageDetails {
  PackageID?: string;
  PackageName?: string;
  PackageType?: PackageType | string;
  LastUpdated?: Date;
  DomainName?: string;
  DomainPackageStatus?: DomainPackageStatus | string;
  PackageVersion?: string;
  ReferencePath?: string;
  ErrorDetails?: ErrorDetails;
}
export interface AssociatePackageResponse {
  DomainPackageDetails?: DomainPackageDetails;
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export interface AuthorizeVpcEndpointAccessRequest {
  DomainName: string | undefined;
  Account: string | undefined;
}
export declare const PrincipalType: {
  readonly AWS_ACCOUNT: "AWS_ACCOUNT";
  readonly AWS_SERVICE: "AWS_SERVICE";
};
export type PrincipalType = (typeof PrincipalType)[keyof typeof PrincipalType];
export interface AuthorizedPrincipal {
  PrincipalType?: PrincipalType | string;
  Principal?: string;
}
export interface AuthorizeVpcEndpointAccessResponse {
  AuthorizedPrincipal: AuthorizedPrincipal | undefined;
}
export interface CancelElasticsearchServiceSoftwareUpdateRequest {
  DomainName: string | undefined;
}
export declare const DeploymentStatus: {
  readonly COMPLETED: "COMPLETED";
  readonly ELIGIBLE: "ELIGIBLE";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly NOT_ELIGIBLE: "NOT_ELIGIBLE";
  readonly PENDING_UPDATE: "PENDING_UPDATE";
};
export type DeploymentStatus =
  (typeof DeploymentStatus)[keyof typeof DeploymentStatus];
export interface ServiceSoftwareOptions {
  CurrentVersion?: string;
  NewVersion?: string;
  UpdateAvailable?: boolean;
  Cancellable?: boolean;
  UpdateStatus?: DeploymentStatus | string;
  Description?: string;
  AutomatedUpdateDate?: Date;
  OptionalDeployment?: boolean;
}
export interface CancelElasticsearchServiceSoftwareUpdateResponse {
  ServiceSoftwareOptions?: ServiceSoftwareOptions;
}
export declare const AutoTuneDesiredState: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type AutoTuneDesiredState =
  (typeof AutoTuneDesiredState)[keyof typeof AutoTuneDesiredState];
export declare const TimeUnit: {
  readonly HOURS: "HOURS";
};
export type TimeUnit = (typeof TimeUnit)[keyof typeof TimeUnit];
export interface Duration {
  Value?: number;
  Unit?: TimeUnit | string;
}
export interface AutoTuneMaintenanceSchedule {
  StartAt?: Date;
  Duration?: Duration;
  CronExpressionForRecurrence?: string;
}
export interface AutoTuneOptionsInput {
  DesiredState?: AutoTuneDesiredState | string;
  MaintenanceSchedules?: AutoTuneMaintenanceSchedule[];
}
export interface CognitoOptions {
  Enabled?: boolean;
  UserPoolId?: string;
  IdentityPoolId?: string;
  RoleArn?: string;
}
export declare const TLSSecurityPolicy: {
  readonly POLICY_MIN_TLS_1_0_2019_07: "Policy-Min-TLS-1-0-2019-07";
  readonly POLICY_MIN_TLS_1_2_2019_07: "Policy-Min-TLS-1-2-2019-07";
};
export type TLSSecurityPolicy =
  (typeof TLSSecurityPolicy)[keyof typeof TLSSecurityPolicy];
export interface DomainEndpointOptions {
  EnforceHTTPS?: boolean;
  TLSSecurityPolicy?: TLSSecurityPolicy | string;
  CustomEndpointEnabled?: boolean;
  CustomEndpoint?: string;
  CustomEndpointCertificateArn?: string;
}
export declare const VolumeType: {
  readonly gp2: "gp2";
  readonly gp3: "gp3";
  readonly io1: "io1";
  readonly standard: "standard";
};
export type VolumeType = (typeof VolumeType)[keyof typeof VolumeType];
export interface EBSOptions {
  EBSEnabled?: boolean;
  VolumeType?: VolumeType | string;
  VolumeSize?: number;
  Iops?: number;
  Throughput?: number;
}
export interface ColdStorageOptions {
  Enabled: boolean | undefined;
}
export declare const ESPartitionInstanceType: {
  readonly c4_2xlarge_elasticsearch: "c4.2xlarge.elasticsearch";
  readonly c4_4xlarge_elasticsearch: "c4.4xlarge.elasticsearch";
  readonly c4_8xlarge_elasticsearch: "c4.8xlarge.elasticsearch";
  readonly c4_large_elasticsearch: "c4.large.elasticsearch";
  readonly c4_xlarge_elasticsearch: "c4.xlarge.elasticsearch";
  readonly c5_18xlarge_elasticsearch: "c5.18xlarge.elasticsearch";
  readonly c5_2xlarge_elasticsearch: "c5.2xlarge.elasticsearch";
  readonly c5_4xlarge_elasticsearch: "c5.4xlarge.elasticsearch";
  readonly c5_9xlarge_elasticsearch: "c5.9xlarge.elasticsearch";
  readonly c5_large_elasticsearch: "c5.large.elasticsearch";
  readonly c5_xlarge_elasticsearch: "c5.xlarge.elasticsearch";
  readonly d2_2xlarge_elasticsearch: "d2.2xlarge.elasticsearch";
  readonly d2_4xlarge_elasticsearch: "d2.4xlarge.elasticsearch";
  readonly d2_8xlarge_elasticsearch: "d2.8xlarge.elasticsearch";
  readonly d2_xlarge_elasticsearch: "d2.xlarge.elasticsearch";
  readonly i2_2xlarge_elasticsearch: "i2.2xlarge.elasticsearch";
  readonly i2_xlarge_elasticsearch: "i2.xlarge.elasticsearch";
  readonly i3_16xlarge_elasticsearch: "i3.16xlarge.elasticsearch";
  readonly i3_2xlarge_elasticsearch: "i3.2xlarge.elasticsearch";
  readonly i3_4xlarge_elasticsearch: "i3.4xlarge.elasticsearch";
  readonly i3_8xlarge_elasticsearch: "i3.8xlarge.elasticsearch";
  readonly i3_large_elasticsearch: "i3.large.elasticsearch";
  readonly i3_xlarge_elasticsearch: "i3.xlarge.elasticsearch";
  readonly m3_2xlarge_elasticsearch: "m3.2xlarge.elasticsearch";
  readonly m3_large_elasticsearch: "m3.large.elasticsearch";
  readonly m3_medium_elasticsearch: "m3.medium.elasticsearch";
  readonly m3_xlarge_elasticsearch: "m3.xlarge.elasticsearch";
  readonly m4_10xlarge_elasticsearch: "m4.10xlarge.elasticsearch";
  readonly m4_2xlarge_elasticsearch: "m4.2xlarge.elasticsearch";
  readonly m4_4xlarge_elasticsearch: "m4.4xlarge.elasticsearch";
  readonly m4_large_elasticsearch: "m4.large.elasticsearch";
  readonly m4_xlarge_elasticsearch: "m4.xlarge.elasticsearch";
  readonly m5_12xlarge_elasticsearch: "m5.12xlarge.elasticsearch";
  readonly m5_2xlarge_elasticsearch: "m5.2xlarge.elasticsearch";
  readonly m5_4xlarge_elasticsearch: "m5.4xlarge.elasticsearch";
  readonly m5_large_elasticsearch: "m5.large.elasticsearch";
  readonly m5_xlarge_elasticsearch: "m5.xlarge.elasticsearch";
  readonly r3_2xlarge_elasticsearch: "r3.2xlarge.elasticsearch";
  readonly r3_4xlarge_elasticsearch: "r3.4xlarge.elasticsearch";
  readonly r3_8xlarge_elasticsearch: "r3.8xlarge.elasticsearch";
  readonly r3_large_elasticsearch: "r3.large.elasticsearch";
  readonly r3_xlarge_elasticsearch: "r3.xlarge.elasticsearch";
  readonly r4_16xlarge_elasticsearch: "r4.16xlarge.elasticsearch";
  readonly r4_2xlarge_elasticsearch: "r4.2xlarge.elasticsearch";
  readonly r4_4xlarge_elasticsearch: "r4.4xlarge.elasticsearch";
  readonly r4_8xlarge_elasticsearch: "r4.8xlarge.elasticsearch";
  readonly r4_large_elasticsearch: "r4.large.elasticsearch";
  readonly r4_xlarge_elasticsearch: "r4.xlarge.elasticsearch";
  readonly r5_12xlarge_elasticsearch: "r5.12xlarge.elasticsearch";
  readonly r5_2xlarge_elasticsearch: "r5.2xlarge.elasticsearch";
  readonly r5_4xlarge_elasticsearch: "r5.4xlarge.elasticsearch";
  readonly r5_large_elasticsearch: "r5.large.elasticsearch";
  readonly r5_xlarge_elasticsearch: "r5.xlarge.elasticsearch";
  readonly t2_medium_elasticsearch: "t2.medium.elasticsearch";
  readonly t2_micro_elasticsearch: "t2.micro.elasticsearch";
  readonly t2_small_elasticsearch: "t2.small.elasticsearch";
  readonly ultrawarm1_large_elasticsearch: "ultrawarm1.large.elasticsearch";
  readonly ultrawarm1_medium_elasticsearch: "ultrawarm1.medium.elasticsearch";
};
export type ESPartitionInstanceType =
  (typeof ESPartitionInstanceType)[keyof typeof ESPartitionInstanceType];
export declare const ESWarmPartitionInstanceType: {
  readonly ultrawarm1_large_elasticsearch: "ultrawarm1.large.elasticsearch";
  readonly ultrawarm1_medium_elasticsearch: "ultrawarm1.medium.elasticsearch";
};
export type ESWarmPartitionInstanceType =
  (typeof ESWarmPartitionInstanceType)[keyof typeof ESWarmPartitionInstanceType];
export interface ZoneAwarenessConfig {
  AvailabilityZoneCount?: number;
}
export interface ElasticsearchClusterConfig {
  InstanceType?: ESPartitionInstanceType | string;
  InstanceCount?: number;
  DedicatedMasterEnabled?: boolean;
  ZoneAwarenessEnabled?: boolean;
  ZoneAwarenessConfig?: ZoneAwarenessConfig;
  DedicatedMasterType?: ESPartitionInstanceType | string;
  DedicatedMasterCount?: number;
  WarmEnabled?: boolean;
  WarmType?: ESWarmPartitionInstanceType | string;
  WarmCount?: number;
  ColdStorageOptions?: ColdStorageOptions;
}
export interface EncryptionAtRestOptions {
  Enabled?: boolean;
  KmsKeyId?: string;
}
export declare const LogType: {
  readonly AUDIT_LOGS: "AUDIT_LOGS";
  readonly ES_APPLICATION_LOGS: "ES_APPLICATION_LOGS";
  readonly INDEX_SLOW_LOGS: "INDEX_SLOW_LOGS";
  readonly SEARCH_SLOW_LOGS: "SEARCH_SLOW_LOGS";
};
export type LogType = (typeof LogType)[keyof typeof LogType];
export interface LogPublishingOption {
  CloudWatchLogsLogGroupArn?: string;
  Enabled?: boolean;
}
export interface NodeToNodeEncryptionOptions {
  Enabled?: boolean;
}
export interface SnapshotOptions {
  AutomatedSnapshotStartHour?: number;
}
export interface VPCOptions {
  SubnetIds?: string[];
  SecurityGroupIds?: string[];
}
export interface CreateElasticsearchDomainRequest {
  DomainName: string | undefined;
  ElasticsearchVersion?: string;
  ElasticsearchClusterConfig?: ElasticsearchClusterConfig;
  EBSOptions?: EBSOptions;
  AccessPolicies?: string;
  SnapshotOptions?: SnapshotOptions;
  VPCOptions?: VPCOptions;
  CognitoOptions?: CognitoOptions;
  EncryptionAtRestOptions?: EncryptionAtRestOptions;
  NodeToNodeEncryptionOptions?: NodeToNodeEncryptionOptions;
  AdvancedOptions?: Record<string, string>;
  LogPublishingOptions?: Record<string, LogPublishingOption>;
  DomainEndpointOptions?: DomainEndpointOptions;
  AdvancedSecurityOptions?: AdvancedSecurityOptionsInput;
  AutoTuneOptions?: AutoTuneOptionsInput;
  TagList?: Tag[];
}
export declare const AutoTuneState: {
  readonly DISABLED: "DISABLED";
  readonly DISABLED_AND_ROLLBACK_COMPLETE: "DISABLED_AND_ROLLBACK_COMPLETE";
  readonly DISABLED_AND_ROLLBACK_ERROR: "DISABLED_AND_ROLLBACK_ERROR";
  readonly DISABLED_AND_ROLLBACK_IN_PROGRESS: "DISABLED_AND_ROLLBACK_IN_PROGRESS";
  readonly DISABLED_AND_ROLLBACK_SCHEDULED: "DISABLED_AND_ROLLBACK_SCHEDULED";
  readonly DISABLE_IN_PROGRESS: "DISABLE_IN_PROGRESS";
  readonly ENABLED: "ENABLED";
  readonly ENABLE_IN_PROGRESS: "ENABLE_IN_PROGRESS";
  readonly ERROR: "ERROR";
};
export type AutoTuneState = (typeof AutoTuneState)[keyof typeof AutoTuneState];
export interface AutoTuneOptionsOutput {
  State?: AutoTuneState | string;
  ErrorMessage?: string;
}
export interface ChangeProgressDetails {
  ChangeId?: string;
  Message?: string;
}
export interface VPCDerivedInfo {
  VPCId?: string;
  SubnetIds?: string[];
  AvailabilityZones?: string[];
  SecurityGroupIds?: string[];
}
export interface ElasticsearchDomainStatus {
  DomainId: string | undefined;
  DomainName: string | undefined;
  ARN: string | undefined;
  Created?: boolean;
  Deleted?: boolean;
  Endpoint?: string;
  Endpoints?: Record<string, string>;
  Processing?: boolean;
  UpgradeProcessing?: boolean;
  ElasticsearchVersion?: string;
  ElasticsearchClusterConfig: ElasticsearchClusterConfig | undefined;
  EBSOptions?: EBSOptions;
  AccessPolicies?: string;
  SnapshotOptions?: SnapshotOptions;
  VPCOptions?: VPCDerivedInfo;
  CognitoOptions?: CognitoOptions;
  EncryptionAtRestOptions?: EncryptionAtRestOptions;
  NodeToNodeEncryptionOptions?: NodeToNodeEncryptionOptions;
  AdvancedOptions?: Record<string, string>;
  LogPublishingOptions?: Record<string, LogPublishingOption>;
  ServiceSoftwareOptions?: ServiceSoftwareOptions;
  DomainEndpointOptions?: DomainEndpointOptions;
  AdvancedSecurityOptions?: AdvancedSecurityOptions;
  AutoTuneOptions?: AutoTuneOptionsOutput;
  ChangeProgressDetails?: ChangeProgressDetails;
}
export interface CreateElasticsearchDomainResponse {
  DomainStatus?: ElasticsearchDomainStatus;
}
export declare class InvalidTypeException extends __BaseException {
  readonly name: "InvalidTypeException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidTypeException, __BaseException>
  );
}
export declare class ResourceAlreadyExistsException extends __BaseException {
  readonly name: "ResourceAlreadyExistsException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceAlreadyExistsException, __BaseException>
  );
}
export interface CreateOutboundCrossClusterSearchConnectionRequest {
  SourceDomainInfo: DomainInformation | undefined;
  DestinationDomainInfo: DomainInformation | undefined;
  ConnectionAlias: string | undefined;
}
export declare const OutboundCrossClusterSearchConnectionStatusCode: {
  readonly ACTIVE: "ACTIVE";
  readonly DELETED: "DELETED";
  readonly DELETING: "DELETING";
  readonly PENDING_ACCEPTANCE: "PENDING_ACCEPTANCE";
  readonly PROVISIONING: "PROVISIONING";
  readonly REJECTED: "REJECTED";
  readonly VALIDATING: "VALIDATING";
  readonly VALIDATION_FAILED: "VALIDATION_FAILED";
};
export type OutboundCrossClusterSearchConnectionStatusCode =
  (typeof OutboundCrossClusterSearchConnectionStatusCode)[keyof typeof OutboundCrossClusterSearchConnectionStatusCode];
export interface OutboundCrossClusterSearchConnectionStatus {
  StatusCode?: OutboundCrossClusterSearchConnectionStatusCode | string;
  Message?: string;
}
export interface CreateOutboundCrossClusterSearchConnectionResponse {
  SourceDomainInfo?: DomainInformation;
  DestinationDomainInfo?: DomainInformation;
  ConnectionAlias?: string;
  ConnectionStatus?: OutboundCrossClusterSearchConnectionStatus;
  CrossClusterSearchConnectionId?: string;
}
export interface PackageSource {
  S3BucketName?: string;
  S3Key?: string;
}
export interface CreatePackageRequest {
  PackageName: string | undefined;
  PackageType: PackageType | string | undefined;
  PackageDescription?: string;
  PackageSource: PackageSource | undefined;
}
export declare const PackageStatus: {
  readonly AVAILABLE: "AVAILABLE";
  readonly COPYING: "COPYING";
  readonly COPY_FAILED: "COPY_FAILED";
  readonly DELETED: "DELETED";
  readonly DELETE_FAILED: "DELETE_FAILED";
  readonly DELETING: "DELETING";
  readonly VALIDATING: "VALIDATING";
  readonly VALIDATION_FAILED: "VALIDATION_FAILED";
};
export type PackageStatus = (typeof PackageStatus)[keyof typeof PackageStatus];
export interface PackageDetails {
  PackageID?: string;
  PackageName?: string;
  PackageType?: PackageType | string;
  PackageDescription?: string;
  PackageStatus?: PackageStatus | string;
  CreatedAt?: Date;
  LastUpdatedAt?: Date;
  AvailablePackageVersion?: string;
  ErrorDetails?: ErrorDetails;
}
export interface CreatePackageResponse {
  PackageDetails?: PackageDetails;
}
export interface CreateVpcEndpointRequest {
  DomainArn: string | undefined;
  VpcOptions: VPCOptions | undefined;
  ClientToken?: string;
}
export declare const VpcEndpointStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATE_FAILED: "CREATE_FAILED";
  readonly CREATING: "CREATING";
  readonly DELETE_FAILED: "DELETE_FAILED";
  readonly DELETING: "DELETING";
  readonly UPDATE_FAILED: "UPDATE_FAILED";
  readonly UPDATING: "UPDATING";
};
export type VpcEndpointStatus =
  (typeof VpcEndpointStatus)[keyof typeof VpcEndpointStatus];
export interface VpcEndpoint {
  VpcEndpointId?: string;
  VpcEndpointOwner?: string;
  DomainArn?: string;
  VpcOptions?: VPCDerivedInfo;
  Status?: VpcEndpointStatus | string;
  Endpoint?: string;
}
export interface CreateVpcEndpointResponse {
  VpcEndpoint: VpcEndpoint | undefined;
}
export interface DeleteElasticsearchDomainRequest {
  DomainName: string | undefined;
}
export interface DeleteElasticsearchDomainResponse {
  DomainStatus?: ElasticsearchDomainStatus;
}
export interface DeleteInboundCrossClusterSearchConnectionRequest {
  CrossClusterSearchConnectionId: string | undefined;
}
export interface DeleteInboundCrossClusterSearchConnectionResponse {
  CrossClusterSearchConnection?: InboundCrossClusterSearchConnection;
}
export interface DeleteOutboundCrossClusterSearchConnectionRequest {
  CrossClusterSearchConnectionId: string | undefined;
}
export interface OutboundCrossClusterSearchConnection {
  SourceDomainInfo?: DomainInformation;
  DestinationDomainInfo?: DomainInformation;
  CrossClusterSearchConnectionId?: string;
  ConnectionAlias?: string;
  ConnectionStatus?: OutboundCrossClusterSearchConnectionStatus;
}
export interface DeleteOutboundCrossClusterSearchConnectionResponse {
  CrossClusterSearchConnection?: OutboundCrossClusterSearchConnection;
}
export interface DeletePackageRequest {
  PackageID: string | undefined;
}
export interface DeletePackageResponse {
  PackageDetails?: PackageDetails;
}
export interface DeleteVpcEndpointRequest {
  VpcEndpointId: string | undefined;
}
export interface VpcEndpointSummary {
  VpcEndpointId?: string;
  VpcEndpointOwner?: string;
  DomainArn?: string;
  Status?: VpcEndpointStatus | string;
}
export interface DeleteVpcEndpointResponse {
  VpcEndpointSummary: VpcEndpointSummary | undefined;
}
export interface DescribeDomainAutoTunesRequest {
  DomainName: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export declare const ScheduledAutoTuneActionType: {
  readonly JVM_HEAP_SIZE_TUNING: "JVM_HEAP_SIZE_TUNING";
  readonly JVM_YOUNG_GEN_TUNING: "JVM_YOUNG_GEN_TUNING";
};
export type ScheduledAutoTuneActionType =
  (typeof ScheduledAutoTuneActionType)[keyof typeof ScheduledAutoTuneActionType];
export declare const ScheduledAutoTuneSeverityType: {
  readonly HIGH: "HIGH";
  readonly LOW: "LOW";
  readonly MEDIUM: "MEDIUM";
};
export type ScheduledAutoTuneSeverityType =
  (typeof ScheduledAutoTuneSeverityType)[keyof typeof ScheduledAutoTuneSeverityType];
export interface ScheduledAutoTuneDetails {
  Date?: Date;
  ActionType?: ScheduledAutoTuneActionType | string;
  Action?: string;
  Severity?: ScheduledAutoTuneSeverityType | string;
}
export interface AutoTuneDetails {
  ScheduledAutoTuneDetails?: ScheduledAutoTuneDetails;
}
export declare const AutoTuneType: {
  readonly SCHEDULED_ACTION: "SCHEDULED_ACTION";
};
export type AutoTuneType = (typeof AutoTuneType)[keyof typeof AutoTuneType];
export interface AutoTune {
  AutoTuneType?: AutoTuneType | string;
  AutoTuneDetails?: AutoTuneDetails;
}
export interface DescribeDomainAutoTunesResponse {
  AutoTunes?: AutoTune[];
  NextToken?: string;
}
export interface DescribeDomainChangeProgressRequest {
  DomainName: string | undefined;
  ChangeId?: string;
}
export interface ChangeProgressStage {
  Name?: string;
  Status?: string;
  Description?: string;
  LastUpdated?: Date;
}
export declare const OverallChangeStatus: {
  readonly COMPLETED: "COMPLETED";
  readonly FAILED: "FAILED";
  readonly PENDING: "PENDING";
  readonly PROCESSING: "PROCESSING";
};
export type OverallChangeStatus =
  (typeof OverallChangeStatus)[keyof typeof OverallChangeStatus];
export interface ChangeProgressStatusDetails {
  ChangeId?: string;
  StartTime?: Date;
  Status?: OverallChangeStatus | string;
  PendingProperties?: string[];
  CompletedProperties?: string[];
  TotalNumberOfStages?: number;
  ChangeProgressStages?: ChangeProgressStage[];
}
export interface DescribeDomainChangeProgressResponse {
  ChangeProgressStatus?: ChangeProgressStatusDetails;
}
export interface DescribeElasticsearchDomainRequest {
  DomainName: string | undefined;
}
export interface DescribeElasticsearchDomainResponse {
  DomainStatus: ElasticsearchDomainStatus | undefined;
}
export interface DescribeElasticsearchDomainConfigRequest {
  DomainName: string | undefined;
}
export declare const RollbackOnDisable: {
  readonly DEFAULT_ROLLBACK: "DEFAULT_ROLLBACK";
  readonly NO_ROLLBACK: "NO_ROLLBACK";
};
export type RollbackOnDisable =
  (typeof RollbackOnDisable)[keyof typeof RollbackOnDisable];
export interface AutoTuneOptions {
  DesiredState?: AutoTuneDesiredState | string;
  RollbackOnDisable?: RollbackOnDisable | string;
  MaintenanceSchedules?: AutoTuneMaintenanceSchedule[];
}
export interface AutoTuneStatus {
  CreationDate: Date | undefined;
  UpdateDate: Date | undefined;
  UpdateVersion?: number;
  State: AutoTuneState | string | undefined;
  ErrorMessage?: string;
  PendingDeletion?: boolean;
}
export interface AutoTuneOptionsStatus {
  Options?: AutoTuneOptions;
  Status?: AutoTuneStatus;
}
export interface CognitoOptionsStatus {
  Options: CognitoOptions | undefined;
  Status: OptionStatus | undefined;
}
export interface DomainEndpointOptionsStatus {
  Options: DomainEndpointOptions | undefined;
  Status: OptionStatus | undefined;
}
export interface EBSOptionsStatus {
  Options: EBSOptions | undefined;
  Status: OptionStatus | undefined;
}
export interface ElasticsearchClusterConfigStatus {
  Options: ElasticsearchClusterConfig | undefined;
  Status: OptionStatus | undefined;
}
export interface ElasticsearchVersionStatus {
  Options: string | undefined;
  Status: OptionStatus | undefined;
}
export interface EncryptionAtRestOptionsStatus {
  Options: EncryptionAtRestOptions | undefined;
  Status: OptionStatus | undefined;
}
export interface LogPublishingOptionsStatus {
  Options?: Record<string, LogPublishingOption>;
  Status?: OptionStatus;
}
export interface NodeToNodeEncryptionOptionsStatus {
  Options: NodeToNodeEncryptionOptions | undefined;
  Status: OptionStatus | undefined;
}
export interface SnapshotOptionsStatus {
  Options: SnapshotOptions | undefined;
  Status: OptionStatus | undefined;
}
export interface VPCDerivedInfoStatus {
  Options: VPCDerivedInfo | undefined;
  Status: OptionStatus | undefined;
}
export interface ElasticsearchDomainConfig {
  ElasticsearchVersion?: ElasticsearchVersionStatus;
  ElasticsearchClusterConfig?: ElasticsearchClusterConfigStatus;
  EBSOptions?: EBSOptionsStatus;
  AccessPolicies?: AccessPoliciesStatus;
  SnapshotOptions?: SnapshotOptionsStatus;
  VPCOptions?: VPCDerivedInfoStatus;
  CognitoOptions?: CognitoOptionsStatus;
  EncryptionAtRestOptions?: EncryptionAtRestOptionsStatus;
  NodeToNodeEncryptionOptions?: NodeToNodeEncryptionOptionsStatus;
  AdvancedOptions?: AdvancedOptionsStatus;
  LogPublishingOptions?: LogPublishingOptionsStatus;
  DomainEndpointOptions?: DomainEndpointOptionsStatus;
  AdvancedSecurityOptions?: AdvancedSecurityOptionsStatus;
  AutoTuneOptions?: AutoTuneOptionsStatus;
  ChangeProgressDetails?: ChangeProgressDetails;
}
export interface DescribeElasticsearchDomainConfigResponse {
  DomainConfig: ElasticsearchDomainConfig | undefined;
}
export interface DescribeElasticsearchDomainsRequest {
  DomainNames: string[] | undefined;
}
export interface DescribeElasticsearchDomainsResponse {
  DomainStatusList: ElasticsearchDomainStatus[] | undefined;
}
export interface DescribeElasticsearchInstanceTypeLimitsRequest {
  DomainName?: string;
  InstanceType: ESPartitionInstanceType | string | undefined;
  ElasticsearchVersion: string | undefined;
}
export interface InstanceCountLimits {
  MinimumInstanceCount?: number;
  MaximumInstanceCount?: number;
}
export interface InstanceLimits {
  InstanceCountLimits?: InstanceCountLimits;
}
export interface StorageTypeLimit {
  LimitName?: string;
  LimitValues?: string[];
}
export interface StorageType {
  StorageTypeName?: string;
  StorageSubTypeName?: string;
  StorageTypeLimits?: StorageTypeLimit[];
}
export interface Limits {
  StorageTypes?: StorageType[];
  InstanceLimits?: InstanceLimits;
  AdditionalLimits?: AdditionalLimit[];
}
export interface DescribeElasticsearchInstanceTypeLimitsResponse {
  LimitsByRole?: Record<string, Limits>;
}
export interface Filter {
  Name?: string;
  Values?: string[];
}
export interface DescribeInboundCrossClusterSearchConnectionsRequest {
  Filters?: Filter[];
  MaxResults?: number;
  NextToken?: string;
}
export interface DescribeInboundCrossClusterSearchConnectionsResponse {
  CrossClusterSearchConnections?: InboundCrossClusterSearchConnection[];
  NextToken?: string;
}
export declare class InvalidPaginationTokenException extends __BaseException {
  readonly name: "InvalidPaginationTokenException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InvalidPaginationTokenException,
      __BaseException
    >
  );
}
export interface DescribeOutboundCrossClusterSearchConnectionsRequest {
  Filters?: Filter[];
  MaxResults?: number;
  NextToken?: string;
}
export interface DescribeOutboundCrossClusterSearchConnectionsResponse {
  CrossClusterSearchConnections?: OutboundCrossClusterSearchConnection[];
  NextToken?: string;
}
export declare const DescribePackagesFilterName: {
  readonly PackageID: "PackageID";
  readonly PackageName: "PackageName";
  readonly PackageStatus: "PackageStatus";
};
export type DescribePackagesFilterName =
  (typeof DescribePackagesFilterName)[keyof typeof DescribePackagesFilterName];
export interface DescribePackagesFilter {
  Name?: DescribePackagesFilterName | string;
  Value?: string[];
}
export interface DescribePackagesRequest {
  Filters?: DescribePackagesFilter[];
  MaxResults?: number;
  NextToken?: string;
}
export interface DescribePackagesResponse {
  PackageDetailsList?: PackageDetails[];
  NextToken?: string;
}
export interface DescribeReservedElasticsearchInstanceOfferingsRequest {
  ReservedElasticsearchInstanceOfferingId?: string;
  MaxResults?: number;
  NextToken?: string;
}
export declare const ReservedElasticsearchInstancePaymentOption: {
  readonly ALL_UPFRONT: "ALL_UPFRONT";
  readonly NO_UPFRONT: "NO_UPFRONT";
  readonly PARTIAL_UPFRONT: "PARTIAL_UPFRONT";
};
export type ReservedElasticsearchInstancePaymentOption =
  (typeof ReservedElasticsearchInstancePaymentOption)[keyof typeof ReservedElasticsearchInstancePaymentOption];
export interface RecurringCharge {
  RecurringChargeAmount?: number;
  RecurringChargeFrequency?: string;
}
export interface ReservedElasticsearchInstanceOffering {
  ReservedElasticsearchInstanceOfferingId?: string;
  ElasticsearchInstanceType?: ESPartitionInstanceType | string;
  Duration?: number;
  FixedPrice?: number;
  UsagePrice?: number;
  CurrencyCode?: string;
  PaymentOption?: ReservedElasticsearchInstancePaymentOption | string;
  RecurringCharges?: RecurringCharge[];
}
export interface DescribeReservedElasticsearchInstanceOfferingsResponse {
  NextToken?: string;
  ReservedElasticsearchInstanceOfferings?: ReservedElasticsearchInstanceOffering[];
}
export interface DescribeReservedElasticsearchInstancesRequest {
  ReservedElasticsearchInstanceId?: string;
  MaxResults?: number;
  NextToken?: string;
}
export interface ReservedElasticsearchInstance {
  ReservationName?: string;
  ReservedElasticsearchInstanceId?: string;
  ReservedElasticsearchInstanceOfferingId?: string;
  ElasticsearchInstanceType?: ESPartitionInstanceType | string;
  StartTime?: Date;
  Duration?: number;
  FixedPrice?: number;
  UsagePrice?: number;
  CurrencyCode?: string;
  ElasticsearchInstanceCount?: number;
  State?: string;
  PaymentOption?: ReservedElasticsearchInstancePaymentOption | string;
  RecurringCharges?: RecurringCharge[];
}
export interface DescribeReservedElasticsearchInstancesResponse {
  NextToken?: string;
  ReservedElasticsearchInstances?: ReservedElasticsearchInstance[];
}
export interface DescribeVpcEndpointsRequest {
  VpcEndpointIds: string[] | undefined;
}
export declare const VpcEndpointErrorCode: {
  readonly ENDPOINT_NOT_FOUND: "ENDPOINT_NOT_FOUND";
  readonly SERVER_ERROR: "SERVER_ERROR";
};
export type VpcEndpointErrorCode =
  (typeof VpcEndpointErrorCode)[keyof typeof VpcEndpointErrorCode];
export interface VpcEndpointError {
  VpcEndpointId?: string;
  ErrorCode?: VpcEndpointErrorCode | string;
  ErrorMessage?: string;
}
export interface DescribeVpcEndpointsResponse {
  VpcEndpoints: VpcEndpoint[] | undefined;
  VpcEndpointErrors: VpcEndpointError[] | undefined;
}
export interface DissociatePackageRequest {
  PackageID: string | undefined;
  DomainName: string | undefined;
}
export interface DissociatePackageResponse {
  DomainPackageDetails?: DomainPackageDetails;
}
export interface GetCompatibleElasticsearchVersionsRequest {
  DomainName?: string;
}
export interface CompatibleVersionsMap {
  SourceVersion?: string;
  TargetVersions?: string[];
}
export interface GetCompatibleElasticsearchVersionsResponse {
  CompatibleElasticsearchVersions?: CompatibleVersionsMap[];
}
export interface GetPackageVersionHistoryRequest {
  PackageID: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface PackageVersionHistory {
  PackageVersion?: string;
  CommitMessage?: string;
  CreatedAt?: Date;
}
export interface GetPackageVersionHistoryResponse {
  PackageID?: string;
  PackageVersionHistoryList?: PackageVersionHistory[];
  NextToken?: string;
}
export interface GetUpgradeHistoryRequest {
  DomainName: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export declare const UpgradeStep: {
  readonly PRE_UPGRADE_CHECK: "PRE_UPGRADE_CHECK";
  readonly SNAPSHOT: "SNAPSHOT";
  readonly UPGRADE: "UPGRADE";
};
export type UpgradeStep = (typeof UpgradeStep)[keyof typeof UpgradeStep];
export declare const UpgradeStatus: {
  readonly FAILED: "FAILED";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly SUCCEEDED: "SUCCEEDED";
  readonly SUCCEEDED_WITH_ISSUES: "SUCCEEDED_WITH_ISSUES";
};
export type UpgradeStatus = (typeof UpgradeStatus)[keyof typeof UpgradeStatus];
export interface UpgradeStepItem {
  UpgradeStep?: UpgradeStep | string;
  UpgradeStepStatus?: UpgradeStatus | string;
  Issues?: string[];
  ProgressPercent?: number;
}
export interface UpgradeHistory {
  UpgradeName?: string;
  StartTimestamp?: Date;
  UpgradeStatus?: UpgradeStatus | string;
  StepsList?: UpgradeStepItem[];
}
export interface GetUpgradeHistoryResponse {
  UpgradeHistories?: UpgradeHistory[];
  NextToken?: string;
}
export interface GetUpgradeStatusRequest {
  DomainName: string | undefined;
}
export interface GetUpgradeStatusResponse {
  UpgradeStep?: UpgradeStep | string;
  StepStatus?: UpgradeStatus | string;
  UpgradeName?: string;
}
export declare const EngineType: {
  readonly Elasticsearch: "Elasticsearch";
  readonly OpenSearch: "OpenSearch";
};
export type EngineType = (typeof EngineType)[keyof typeof EngineType];
export interface ListDomainNamesRequest {
  EngineType?: EngineType | string;
}
export interface DomainInfo {
  DomainName?: string;
  EngineType?: EngineType | string;
}
export interface ListDomainNamesResponse {
  DomainNames?: DomainInfo[];
}
export interface ListDomainsForPackageRequest {
  PackageID: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListDomainsForPackageResponse {
  DomainPackageDetailsList?: DomainPackageDetails[];
  NextToken?: string;
}
export interface ListElasticsearchInstanceTypesRequest {
  ElasticsearchVersion: string | undefined;
  DomainName?: string;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListElasticsearchInstanceTypesResponse {
  ElasticsearchInstanceTypes?: (ESPartitionInstanceType | string)[];
  NextToken?: string;
}
export interface ListElasticsearchVersionsRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface ListElasticsearchVersionsResponse {
  ElasticsearchVersions?: string[];
  NextToken?: string;
}
export interface ListPackagesForDomainRequest {
  DomainName: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListPackagesForDomainResponse {
  DomainPackageDetailsList?: DomainPackageDetails[];
  NextToken?: string;
}
export interface ListTagsRequest {
  ARN: string | undefined;
}
export interface ListTagsResponse {
  TagList?: Tag[];
}
export interface ListVpcEndpointAccessRequest {
  DomainName: string | undefined;
  NextToken?: string;
}
export interface ListVpcEndpointAccessResponse {
  AuthorizedPrincipalList: AuthorizedPrincipal[] | undefined;
  NextToken: string | undefined;
}
export interface ListVpcEndpointsRequest {
  NextToken?: string;
}
export interface ListVpcEndpointsResponse {
  VpcEndpointSummaryList: VpcEndpointSummary[] | undefined;
  NextToken: string | undefined;
}
export interface ListVpcEndpointsForDomainRequest {
  DomainName: string | undefined;
  NextToken?: string;
}
export interface ListVpcEndpointsForDomainResponse {
  VpcEndpointSummaryList: VpcEndpointSummary[] | undefined;
  NextToken: string | undefined;
}
export interface PurchaseReservedElasticsearchInstanceOfferingRequest {
  ReservedElasticsearchInstanceOfferingId: string | undefined;
  ReservationName: string | undefined;
  InstanceCount?: number;
}
export interface PurchaseReservedElasticsearchInstanceOfferingResponse {
  ReservedElasticsearchInstanceId?: string;
  ReservationName?: string;
}
export interface RejectInboundCrossClusterSearchConnectionRequest {
  CrossClusterSearchConnectionId: string | undefined;
}
export interface RejectInboundCrossClusterSearchConnectionResponse {
  CrossClusterSearchConnection?: InboundCrossClusterSearchConnection;
}
export interface RemoveTagsRequest {
  ARN: string | undefined;
  TagKeys: string[] | undefined;
}
export interface RevokeVpcEndpointAccessRequest {
  DomainName: string | undefined;
  Account: string | undefined;
}
export interface RevokeVpcEndpointAccessResponse {}
export interface StartElasticsearchServiceSoftwareUpdateRequest {
  DomainName: string | undefined;
}
export interface StartElasticsearchServiceSoftwareUpdateResponse {
  ServiceSoftwareOptions?: ServiceSoftwareOptions;
}
export interface UpdateElasticsearchDomainConfigRequest {
  DomainName: string | undefined;
  ElasticsearchClusterConfig?: ElasticsearchClusterConfig;
  EBSOptions?: EBSOptions;
  SnapshotOptions?: SnapshotOptions;
  VPCOptions?: VPCOptions;
  CognitoOptions?: CognitoOptions;
  AdvancedOptions?: Record<string, string>;
  AccessPolicies?: string;
  LogPublishingOptions?: Record<string, LogPublishingOption>;
  DomainEndpointOptions?: DomainEndpointOptions;
  AdvancedSecurityOptions?: AdvancedSecurityOptionsInput;
  NodeToNodeEncryptionOptions?: NodeToNodeEncryptionOptions;
  EncryptionAtRestOptions?: EncryptionAtRestOptions;
  AutoTuneOptions?: AutoTuneOptions;
  DryRun?: boolean;
}
export interface DryRunResults {
  DeploymentType?: string;
  Message?: string;
}
export interface UpdateElasticsearchDomainConfigResponse {
  DomainConfig: ElasticsearchDomainConfig | undefined;
  DryRunResults?: DryRunResults;
}
export interface UpdatePackageRequest {
  PackageID: string | undefined;
  PackageSource: PackageSource | undefined;
  PackageDescription?: string;
  CommitMessage?: string;
}
export interface UpdatePackageResponse {
  PackageDetails?: PackageDetails;
}
export interface UpdateVpcEndpointRequest {
  VpcEndpointId: string | undefined;
  VpcOptions: VPCOptions | undefined;
}
export interface UpdateVpcEndpointResponse {
  VpcEndpoint: VpcEndpoint | undefined;
}
export interface UpgradeElasticsearchDomainRequest {
  DomainName: string | undefined;
  TargetVersion: string | undefined;
  PerformCheckOnly?: boolean;
}
export interface UpgradeElasticsearchDomainResponse {
  DomainName?: string;
  TargetVersion?: string;
  PerformCheckOnly?: boolean;
  ChangeProgressDetails?: ChangeProgressDetails;
}
export declare const MasterUserOptionsFilterSensitiveLog: (
  obj: MasterUserOptions
) => any;
export declare const SAMLOptionsInputFilterSensitiveLog: (
  obj: SAMLOptionsInput
) => any;
export declare const AdvancedSecurityOptionsInputFilterSensitiveLog: (
  obj: AdvancedSecurityOptionsInput
) => any;
export declare const CreateElasticsearchDomainRequestFilterSensitiveLog: (
  obj: CreateElasticsearchDomainRequest
) => any;
export declare const UpdateElasticsearchDomainConfigRequestFilterSensitiveLog: (
  obj: UpdateElasticsearchDomainConfigRequest
) => any;
