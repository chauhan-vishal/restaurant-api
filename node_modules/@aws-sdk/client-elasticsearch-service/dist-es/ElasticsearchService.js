import { AcceptInboundCrossClusterSearchConnectionCommand, } from "./commands/AcceptInboundCrossClusterSearchConnectionCommand";
import { AddTagsCommand } from "./commands/AddTagsCommand";
import { AssociatePackageCommand, } from "./commands/AssociatePackageCommand";
import { AuthorizeVpcEndpointAccessCommand, } from "./commands/AuthorizeVpcEndpointAccessCommand";
import { CancelElasticsearchServiceSoftwareUpdateCommand, } from "./commands/CancelElasticsearchServiceSoftwareUpdateCommand";
import { CreateElasticsearchDomainCommand, } from "./commands/CreateElasticsearchDomainCommand";
import { CreateOutboundCrossClusterSearchConnectionCommand, } from "./commands/CreateOutboundCrossClusterSearchConnectionCommand";
import { CreatePackageCommand, } from "./commands/CreatePackageCommand";
import { CreateVpcEndpointCommand, } from "./commands/CreateVpcEndpointCommand";
import { DeleteElasticsearchDomainCommand, } from "./commands/DeleteElasticsearchDomainCommand";
import { DeleteElasticsearchServiceRoleCommand, } from "./commands/DeleteElasticsearchServiceRoleCommand";
import { DeleteInboundCrossClusterSearchConnectionCommand, } from "./commands/DeleteInboundCrossClusterSearchConnectionCommand";
import { DeleteOutboundCrossClusterSearchConnectionCommand, } from "./commands/DeleteOutboundCrossClusterSearchConnectionCommand";
import { DeletePackageCommand, } from "./commands/DeletePackageCommand";
import { DeleteVpcEndpointCommand, } from "./commands/DeleteVpcEndpointCommand";
import { DescribeDomainAutoTunesCommand, } from "./commands/DescribeDomainAutoTunesCommand";
import { DescribeDomainChangeProgressCommand, } from "./commands/DescribeDomainChangeProgressCommand";
import { DescribeElasticsearchDomainCommand, } from "./commands/DescribeElasticsearchDomainCommand";
import { DescribeElasticsearchDomainConfigCommand, } from "./commands/DescribeElasticsearchDomainConfigCommand";
import { DescribeElasticsearchDomainsCommand, } from "./commands/DescribeElasticsearchDomainsCommand";
import { DescribeElasticsearchInstanceTypeLimitsCommand, } from "./commands/DescribeElasticsearchInstanceTypeLimitsCommand";
import { DescribeInboundCrossClusterSearchConnectionsCommand, } from "./commands/DescribeInboundCrossClusterSearchConnectionsCommand";
import { DescribeOutboundCrossClusterSearchConnectionsCommand, } from "./commands/DescribeOutboundCrossClusterSearchConnectionsCommand";
import { DescribePackagesCommand, } from "./commands/DescribePackagesCommand";
import { DescribeReservedElasticsearchInstanceOfferingsCommand, } from "./commands/DescribeReservedElasticsearchInstanceOfferingsCommand";
import { DescribeReservedElasticsearchInstancesCommand, } from "./commands/DescribeReservedElasticsearchInstancesCommand";
import { DescribeVpcEndpointsCommand, } from "./commands/DescribeVpcEndpointsCommand";
import { DissociatePackageCommand, } from "./commands/DissociatePackageCommand";
import { GetCompatibleElasticsearchVersionsCommand, } from "./commands/GetCompatibleElasticsearchVersionsCommand";
import { GetPackageVersionHistoryCommand, } from "./commands/GetPackageVersionHistoryCommand";
import { GetUpgradeHistoryCommand, } from "./commands/GetUpgradeHistoryCommand";
import { GetUpgradeStatusCommand, } from "./commands/GetUpgradeStatusCommand";
import { ListDomainNamesCommand, } from "./commands/ListDomainNamesCommand";
import { ListDomainsForPackageCommand, } from "./commands/ListDomainsForPackageCommand";
import { ListElasticsearchInstanceTypesCommand, } from "./commands/ListElasticsearchInstanceTypesCommand";
import { ListElasticsearchVersionsCommand, } from "./commands/ListElasticsearchVersionsCommand";
import { ListPackagesForDomainCommand, } from "./commands/ListPackagesForDomainCommand";
import { ListTagsCommand } from "./commands/ListTagsCommand";
import { ListVpcEndpointAccessCommand, } from "./commands/ListVpcEndpointAccessCommand";
import { ListVpcEndpointsCommand, } from "./commands/ListVpcEndpointsCommand";
import { ListVpcEndpointsForDomainCommand, } from "./commands/ListVpcEndpointsForDomainCommand";
import { PurchaseReservedElasticsearchInstanceOfferingCommand, } from "./commands/PurchaseReservedElasticsearchInstanceOfferingCommand";
import { RejectInboundCrossClusterSearchConnectionCommand, } from "./commands/RejectInboundCrossClusterSearchConnectionCommand";
import { RemoveTagsCommand } from "./commands/RemoveTagsCommand";
import { RevokeVpcEndpointAccessCommand, } from "./commands/RevokeVpcEndpointAccessCommand";
import { StartElasticsearchServiceSoftwareUpdateCommand, } from "./commands/StartElasticsearchServiceSoftwareUpdateCommand";
import { UpdateElasticsearchDomainConfigCommand, } from "./commands/UpdateElasticsearchDomainConfigCommand";
import { UpdatePackageCommand, } from "./commands/UpdatePackageCommand";
import { UpdateVpcEndpointCommand, } from "./commands/UpdateVpcEndpointCommand";
import { UpgradeElasticsearchDomainCommand, } from "./commands/UpgradeElasticsearchDomainCommand";
import { ElasticsearchServiceClient } from "./ElasticsearchServiceClient";
export class ElasticsearchService extends ElasticsearchServiceClient {
    acceptInboundCrossClusterSearchConnection(args, optionsOrCb, cb) {
        const command = new AcceptInboundCrossClusterSearchConnectionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    addTags(args, optionsOrCb, cb) {
        const command = new AddTagsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    associatePackage(args, optionsOrCb, cb) {
        const command = new AssociatePackageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    authorizeVpcEndpointAccess(args, optionsOrCb, cb) {
        const command = new AuthorizeVpcEndpointAccessCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    cancelElasticsearchServiceSoftwareUpdate(args, optionsOrCb, cb) {
        const command = new CancelElasticsearchServiceSoftwareUpdateCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createElasticsearchDomain(args, optionsOrCb, cb) {
        const command = new CreateElasticsearchDomainCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createOutboundCrossClusterSearchConnection(args, optionsOrCb, cb) {
        const command = new CreateOutboundCrossClusterSearchConnectionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createPackage(args, optionsOrCb, cb) {
        const command = new CreatePackageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createVpcEndpoint(args, optionsOrCb, cb) {
        const command = new CreateVpcEndpointCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteElasticsearchDomain(args, optionsOrCb, cb) {
        const command = new DeleteElasticsearchDomainCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteElasticsearchServiceRole(args, optionsOrCb, cb) {
        const command = new DeleteElasticsearchServiceRoleCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteInboundCrossClusterSearchConnection(args, optionsOrCb, cb) {
        const command = new DeleteInboundCrossClusterSearchConnectionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteOutboundCrossClusterSearchConnection(args, optionsOrCb, cb) {
        const command = new DeleteOutboundCrossClusterSearchConnectionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deletePackage(args, optionsOrCb, cb) {
        const command = new DeletePackageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteVpcEndpoint(args, optionsOrCb, cb) {
        const command = new DeleteVpcEndpointCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeDomainAutoTunes(args, optionsOrCb, cb) {
        const command = new DescribeDomainAutoTunesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeDomainChangeProgress(args, optionsOrCb, cb) {
        const command = new DescribeDomainChangeProgressCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeElasticsearchDomain(args, optionsOrCb, cb) {
        const command = new DescribeElasticsearchDomainCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeElasticsearchDomainConfig(args, optionsOrCb, cb) {
        const command = new DescribeElasticsearchDomainConfigCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeElasticsearchDomains(args, optionsOrCb, cb) {
        const command = new DescribeElasticsearchDomainsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeElasticsearchInstanceTypeLimits(args, optionsOrCb, cb) {
        const command = new DescribeElasticsearchInstanceTypeLimitsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeInboundCrossClusterSearchConnections(args, optionsOrCb, cb) {
        const command = new DescribeInboundCrossClusterSearchConnectionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeOutboundCrossClusterSearchConnections(args, optionsOrCb, cb) {
        const command = new DescribeOutboundCrossClusterSearchConnectionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describePackages(args, optionsOrCb, cb) {
        const command = new DescribePackagesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeReservedElasticsearchInstanceOfferings(args, optionsOrCb, cb) {
        const command = new DescribeReservedElasticsearchInstanceOfferingsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeReservedElasticsearchInstances(args, optionsOrCb, cb) {
        const command = new DescribeReservedElasticsearchInstancesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeVpcEndpoints(args, optionsOrCb, cb) {
        const command = new DescribeVpcEndpointsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    dissociatePackage(args, optionsOrCb, cb) {
        const command = new DissociatePackageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getCompatibleElasticsearchVersions(args, optionsOrCb, cb) {
        const command = new GetCompatibleElasticsearchVersionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getPackageVersionHistory(args, optionsOrCb, cb) {
        const command = new GetPackageVersionHistoryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getUpgradeHistory(args, optionsOrCb, cb) {
        const command = new GetUpgradeHistoryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getUpgradeStatus(args, optionsOrCb, cb) {
        const command = new GetUpgradeStatusCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listDomainNames(args, optionsOrCb, cb) {
        const command = new ListDomainNamesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listDomainsForPackage(args, optionsOrCb, cb) {
        const command = new ListDomainsForPackageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listElasticsearchInstanceTypes(args, optionsOrCb, cb) {
        const command = new ListElasticsearchInstanceTypesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listElasticsearchVersions(args, optionsOrCb, cb) {
        const command = new ListElasticsearchVersionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listPackagesForDomain(args, optionsOrCb, cb) {
        const command = new ListPackagesForDomainCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listTags(args, optionsOrCb, cb) {
        const command = new ListTagsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listVpcEndpointAccess(args, optionsOrCb, cb) {
        const command = new ListVpcEndpointAccessCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listVpcEndpoints(args, optionsOrCb, cb) {
        const command = new ListVpcEndpointsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listVpcEndpointsForDomain(args, optionsOrCb, cb) {
        const command = new ListVpcEndpointsForDomainCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    purchaseReservedElasticsearchInstanceOffering(args, optionsOrCb, cb) {
        const command = new PurchaseReservedElasticsearchInstanceOfferingCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    rejectInboundCrossClusterSearchConnection(args, optionsOrCb, cb) {
        const command = new RejectInboundCrossClusterSearchConnectionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    removeTags(args, optionsOrCb, cb) {
        const command = new RemoveTagsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    revokeVpcEndpointAccess(args, optionsOrCb, cb) {
        const command = new RevokeVpcEndpointAccessCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    startElasticsearchServiceSoftwareUpdate(args, optionsOrCb, cb) {
        const command = new StartElasticsearchServiceSoftwareUpdateCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    updateElasticsearchDomainConfig(args, optionsOrCb, cb) {
        const command = new UpdateElasticsearchDomainConfigCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    updatePackage(args, optionsOrCb, cb) {
        const command = new UpdatePackageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    updateVpcEndpoint(args, optionsOrCb, cb) {
        const command = new UpdateVpcEndpointCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    upgradeElasticsearchDomain(args, optionsOrCb, cb) {
        const command = new UpgradeElasticsearchDomainCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
}
